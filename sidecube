#!/bin/bash
#
# Project spectral lines over continuum or other 2-D maps and visualize using
# like e.g. Google Maps.
#
# Created by: Fernando Olguin
#

##### Environment #####
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

##### Functions #####
function usage () {
echo "usage:"
}

function base_layer () {
    local script="${DIR}/baselayer.py"
    python $script $* &
    local pid="$!"
    if [[ $verbose -eq 1 ]]
    then
        echo "Base layer plot PID: $pid"
    fi
}

function overlay () {
    local script="${DIR}/overlay.py"
    python $script $* &
    local pid="$!"
    if [[ $verbose -eq 1 ]]
    then
        echo "Overlay plot PID: $!"
    fi
}

function get_tiles () {
    local flags="-density $1 -antialias -resize ${2}x${2} $3"
    flags="$flags -crop 256x256 +adjoin -extent 256x256 -quality 0"
    if [[ $7 != "" ]]
    then
        echo "Setting transparent: $7"
        flags="$flags -transparent $7"
    fi
    flags="$flags -set filename:tile"
    convert $flags \
        "%[fx:floor(page.x/256)]_%[fx:floor(page.y/256)]" \
        +repage "tiles/${4}_${5}_%[filename:tile]$6" &
    echo "$4 level $5 PID: $!"
}

function base_layer_pipe () {
    # Plots
    if [[ ! -e "baselayer.pdf" ]] || [[ $redo == 1 ]]
    then
        echo "Ploting base layer"
        base_layer "--blc $blc --trc $trc $baselayers baselayer.pdf"
        wait
    else
        echo "Base layer already plotted"
    fi

    # Create tiles
    for z in $(seq 0 $zoom)
    do
        local maxtile=$(echo "2^$z - 1" | bc)
        local lasttile="tiles/baselayer_${z}_${maxtile}_${maxtile}.jpg"
        if [[ $redo == 1 ]] || [[ ! -e $lasttile ]]
        then
            local zlevel=$((maxtile + 1))
            zlevel=$((zlevel * 256))
            get_tiles "300" "$zlevel" "baselayer.pdf" "baselayer" "$z" ".jpg"
        else
            echo "Tiles for base layer level $z already done"
        fi
    done
    wait
    echo "Base layer finished"
}

function overlay_pipe () {
    # Data selection
    local pyflags="--blc $blc --trc $trc -c $ch"
    if [[ $level == "auto" ]]
    then
        pyflags="${pyflags} --autolimit"
    elif [[ $level != "" ]]
    then
        pyflags="${pyflags} --level $level"
    fi
    if [[ $every != "" ]]
    then
        pyflags="${pyflags} --every $every"
    fi

    # Plots
    if [[ ! -e "overlay.pdf" ]] || [[ $redo == 1 ]]
    then
        echo "Ploting overlay layer"
        overlay "$pyflags $overlays overlay.pdf"
        wait
    else
        echo "Overlay layer already plotted"
    fi

    # Create tiles
    for z in $(seq 4 $zoom)
    do
        local maxtile=$(echo "2^$z - 1" | bc)
        local lasttile="tiles/overlay_${z}_${maxtile}_${maxtile}.png"
        if [[ $redo == 1 ]] || [[ ! -e $lasttile ]]
        then
            local zlevel=$((maxtile + 1))
            zlevel=$((zlevel * 256))
            get_tiles "600" "$zlevel" "overlay.pdf" "overlay" "$z" ".jpg"
        else
            echo "Tiles for overlay level $z already done"
        fi
    done
    wait
    for jpg in tiles/overlay*.jpg
    do
        convert $jpg -fuzz 5% -transparent white ${jpg/.jpg/.png} 
        rm $jpg
    done
    echo "Overlay layer finished"
}

##### Main #####
echo "Starting time: $(date)"
baselayers=""
ovelays=""
redo=1
verbose=0
level=""
every=""
while [ "$1" != "" ]; do
    case $1 in
        -h | --help )           usage
                                exit
                                ;;
        -v | --verbose )        verbose=1
                                shift
                                ;;
        -n | --noredo )         redo=0
                                shift
                                ;;
        -c | --chanrange )      shift
                                ch="$1 $2"
                                shift 2
                                ;;
        --trc )                 shift
                                trc="$1 $2"
                                shift 2
                                ;;
        --blc )                 shift
                                blc="$1 $2"
                                shift 2
                                ;;
        -z | --zoom )           shift
                                zoom=$1
                                shift
                                ;;
        --level )               shift
                                level=$1
                                shift
                                ;;
        --autolimit )           level="auto"
                                shift
                                ;;
        --every )               shift
                                every=$1
                                shift
                                ;;
        * )                     overlays=$1
                                shift
                                baselayers=$1
                                shift
                                break
                                ;;
    esac
done

if [[ ! -d "tiles" ]]
then
    echo "Creating directory tiles"
    mkdir "tiles"
fi

base_layer_pipe &
overlay_pipe &
wait
cp ${DIR}/index.html .
firefox index.html
echo "Finish time: $(date)"

